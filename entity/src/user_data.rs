//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;

use crate::enums::Gender;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user_data")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub uid: u64,
	pub glacialeur: Option<String>,
	pub call_name: Option<String>,
	pub gender: Option<Gender>,
	pub chat_message_count: Option<u32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::remind::Entity")]
	Remind,
	#[sea_orm(has_many = "super::remind_assignee::Entity")]
	RemindAssignee,
	#[sea_orm(has_many = "super::talk_history::Entity")]
	TalkHistory,
}

impl Related<super::remind::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Remind.def()
	}
}

impl Related<super::remind_assignee::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::RemindAssignee.def()
	}
}

impl Related<super::talk_history::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::TalkHistory.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
