//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "guild_config")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub uid: u64,
	pub white_list: bool,
	pub leave_ban: bool,
	pub log_channel_id: Option<u64>,
	pub auth_role_id: Option<u64>,
	pub bot_role_id: Option<u64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::confirmed_account::Entity")]
	ConfirmedAccount,
	#[sea_orm(has_many = "super::main_account::Entity")]
	MainAccount,
	#[sea_orm(has_many = "super::pending_account::Entity")]
	PendingAccount,
	#[sea_orm(has_many = "super::sub_account::Entity")]
	SubAccount,
}

impl Related<super::confirmed_account::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ConfirmedAccount.def()
	}
}

impl Related<super::main_account::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::MainAccount.def()
	}
}

impl Related<super::pending_account::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::PendingAccount.def()
	}
}

impl Related<super::sub_account::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::SubAccount.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
