//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "sub_account")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uid: u64,
    pub name: String,
    pub guild_id: u64,
    pub join_date: ChronoDateTimeUtc,
    pub main_uid: u64,
    pub first_cert: u64,
    pub second_cert: Option<u64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::guild_config::Entity",
        from = "Column::GuildId",
        to = "super::guild_config::Column::Uid",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    GuildConfig,
    #[sea_orm(
        belongs_to = "super::main_account::Entity",
        from = "Column::FirstCert",
        to = "super::main_account::Column::Uid",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    MainAccount3,
    #[sea_orm(
        belongs_to = "super::main_account::Entity",
        from = "Column::MainUid",
        to = "super::main_account::Column::Uid",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    MainAccount2,
    #[sea_orm(
        belongs_to = "super::main_account::Entity",
        from = "Column::SecondCert",
        to = "super::main_account::Column::Uid",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    MainAccount1,
}

impl Related<super::guild_config::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GuildConfig.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
