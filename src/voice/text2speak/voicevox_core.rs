/* automatically generated by rust-bindgen 0.71.1 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_CXX26: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub type va_list = *mut ::std::os::raw::c_char;
unsafe extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
unsafe extern "C" {
    pub fn __security_init_cookie();
}
unsafe extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
unsafe extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[doc = " 実行環境に合った適切なハードウェアアクセラレーションモードを選択する"]
pub const VoicevoxAccelerationMode_VOICEVOX_ACCELERATION_MODE_AUTO: VoicevoxAccelerationMode = 0;
#[doc = " ハードウェアアクセラレーションモードを\"CPU\"に設定する"]
pub const VoicevoxAccelerationMode_VOICEVOX_ACCELERATION_MODE_CPU: VoicevoxAccelerationMode = 1;
#[doc = " ハードウェアアクセラレーションモードを\"GPU\"に設定する"]
pub const VoicevoxAccelerationMode_VOICEVOX_ACCELERATION_MODE_GPU: VoicevoxAccelerationMode = 2;
pub type VoicevoxAccelerationMode = i32;
#[doc = " 成功"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_OK: VoicevoxResultCode = 0;
#[doc = " open_jtalk辞書ファイルが読み込まれていない"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_NOT_LOADED_OPENJTALK_DICT_ERROR: VoicevoxResultCode =
    1;
#[doc = " サポートされているデバイス情報取得に失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_GET_SUPPORTED_DEVICES_ERROR: VoicevoxResultCode = 3;
#[doc = " GPUモードがサポートされていない"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_GPU_SUPPORT_ERROR: VoicevoxResultCode = 4;
#[doc = " 推論ライブラリのロードまたは初期化ができなかった"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INIT_INFERENCE_RUNTIME_ERROR: VoicevoxResultCode = 29;
#[doc = " スタイルIDに対するスタイルが見つからなかった"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_STYLE_NOT_FOUND_ERROR: VoicevoxResultCode = 6;
#[doc = " 音声モデルIDに対する音声モデルが見つからなかった"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_MODEL_NOT_FOUND_ERROR: VoicevoxResultCode = 7;
#[doc = " 推論に失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_RUN_MODEL_ERROR: VoicevoxResultCode = 8;
#[doc = " 入力テキストの解析に失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_ANALYZE_TEXT_ERROR: VoicevoxResultCode = 11;
#[doc = " 無効なutf8文字列が入力された"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_UTF8_INPUT_ERROR: VoicevoxResultCode = 12;
#[doc = " AquesTalk風記法のテキストの解析に失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_PARSE_KANA_ERROR: VoicevoxResultCode = 13;
#[doc = " 無効なAudioQuery"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_AUDIO_QUERY_ERROR: VoicevoxResultCode = 14;
#[doc = " 無効なAccentPhrase"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_ACCENT_PHRASE_ERROR: VoicevoxResultCode = 15;
#[doc = " ZIPファイルを開くことに失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_OPEN_ZIP_FILE_ERROR: VoicevoxResultCode = 16;
#[doc = " ZIP内のファイルが読めなかった"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_READ_ZIP_ENTRY_ERROR: VoicevoxResultCode = 17;
#[doc = " モデルの形式が不正"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_MODEL_HEADER_ERROR: VoicevoxResultCode = 28;
#[doc = " すでに読み込まれている音声モデルを読み込もうとした"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_MODEL_ALREADY_LOADED_ERROR: VoicevoxResultCode = 18;
#[doc = " すでに読み込まれているスタイルを読み込もうとした"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_STYLE_ALREADY_LOADED_ERROR: VoicevoxResultCode = 26;
#[doc = " 無効なモデルデータ"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_MODEL_DATA_ERROR: VoicevoxResultCode = 27;
#[doc = " ユーザー辞書を読み込めなかった"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_LOAD_USER_DICT_ERROR: VoicevoxResultCode = 20;
#[doc = " ユーザー辞書を書き込めなかった"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_SAVE_USER_DICT_ERROR: VoicevoxResultCode = 21;
#[doc = " ユーザー辞書に単語が見つからなかった"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_USER_DICT_WORD_NOT_FOUND_ERROR: VoicevoxResultCode =
    22;
#[doc = " OpenJTalkのユーザー辞書の設定に失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_USE_USER_DICT_ERROR: VoicevoxResultCode = 23;
#[doc = " ユーザー辞書の単語のバリデーションに失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_USER_DICT_WORD_ERROR: VoicevoxResultCode = 24;
#[doc = " UUIDの変換に失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_UUID_ERROR: VoicevoxResultCode = 25;
pub type VoicevoxResultCode = i32;
#[doc = " 固有名詞。"]
pub const VoicevoxUserDictWordType_VOICEVOX_USER_DICT_WORD_TYPE_PROPER_NOUN:
    VoicevoxUserDictWordType = 0;
#[doc = " 一般名詞。"]
pub const VoicevoxUserDictWordType_VOICEVOX_USER_DICT_WORD_TYPE_COMMON_NOUN:
    VoicevoxUserDictWordType = 1;
#[doc = " 動詞。"]
pub const VoicevoxUserDictWordType_VOICEVOX_USER_DICT_WORD_TYPE_VERB: VoicevoxUserDictWordType = 2;
#[doc = " 形容詞。"]
pub const VoicevoxUserDictWordType_VOICEVOX_USER_DICT_WORD_TYPE_ADJECTIVE:
    VoicevoxUserDictWordType = 3;
#[doc = " 接尾辞。"]
pub const VoicevoxUserDictWordType_VOICEVOX_USER_DICT_WORD_TYPE_SUFFIX: VoicevoxUserDictWordType =
    4;
pub type VoicevoxUserDictWordType = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenJtalkRc {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxOnnxruntime {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxSynthesizer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxUserDict {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxVoiceModelFile {
    _unused: [u8; 0],
}
#[doc = " ::voicevox_onnxruntime_load_once のオプション。\n\n \\availability{\n   [リリース](https://github.com/voicevox/voicevox_core/releases)されているライブラリではiOSを除くプラットフォームで利用可能。詳細は<a href=\"#voicevox-core-availability\">ファイルレベルの\"Availability\"の節</a>を参照。\n }\n\n \\no-orig-impl{VoicevoxLoadOnnxruntimeOptions}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxLoadOnnxruntimeOptions {
    #[doc = " ONNX Runtimeのファイル名（モジュール名）もしくはファイルパスを指定する。\n\n `dlopen`/[`LoadLibraryExW`](https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibraryexw)の引数に使われる。デフォルトは ::voicevox_get_onnxruntime_lib_versioned_filename と同じ。"]
    pub filename: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VoicevoxLoadOnnxruntimeOptions"]
        [::std::mem::size_of::<VoicevoxLoadOnnxruntimeOptions>() - 8usize];
    ["Alignment of VoicevoxLoadOnnxruntimeOptions"]
        [::std::mem::align_of::<VoicevoxLoadOnnxruntimeOptions>() - 8usize];
    ["Offset of field: VoicevoxLoadOnnxruntimeOptions::filename"]
        [::std::mem::offset_of!(VoicevoxLoadOnnxruntimeOptions, filename) - 0usize];
};
#[doc = " ::voicevox_synthesizer_new のオプション。\n\n \\no-orig-impl{VoicevoxInitializeOptions}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxInitializeOptions {
    #[doc = " ハードウェアアクセラレーションモード"]
    pub acceleration_mode: VoicevoxAccelerationMode,
    #[doc = " CPU利用数を指定\n 0を指定すると環境に合わせたCPUが利用される"]
    pub cpu_num_threads: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VoicevoxInitializeOptions"]
        [::std::mem::size_of::<VoicevoxInitializeOptions>() - 8usize];
    ["Alignment of VoicevoxInitializeOptions"]
        [::std::mem::align_of::<VoicevoxInitializeOptions>() - 4usize];
    ["Offset of field: VoicevoxInitializeOptions::acceleration_mode"]
        [::std::mem::offset_of!(VoicevoxInitializeOptions, acceleration_mode) - 0usize];
    ["Offset of field: VoicevoxInitializeOptions::cpu_num_threads"]
        [::std::mem::offset_of!(VoicevoxInitializeOptions, cpu_num_threads) - 4usize];
};
#[doc = " 音声モデルID。\n\n \\orig-impl{VoicevoxVoiceModelId}"]
pub type VoicevoxVoiceModelId = *const [::std::os::raw::c_uchar; 16usize];
#[doc = " スタイルID。\n\n VOICEVOXにおける、ある<i>キャラクター</i>のある<i>スタイル</i>を指す。\n\n \\orig-impl{VoicevoxStyleId}"]
pub type VoicevoxStyleId = u32;
#[doc = " ::voicevox_synthesizer_synthesis のオプション。\n\n \\no-orig-impl{VoicevoxSynthesisOptions}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxSynthesisOptions {
    #[doc = " 疑問文の調整を有効にする"]
    pub enable_interrogative_upspeak: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VoicevoxSynthesisOptions"]
        [::std::mem::size_of::<VoicevoxSynthesisOptions>() - 1usize];
    ["Alignment of VoicevoxSynthesisOptions"]
        [::std::mem::align_of::<VoicevoxSynthesisOptions>() - 1usize];
    ["Offset of field: VoicevoxSynthesisOptions::enable_interrogative_upspeak"]
        [::std::mem::offset_of!(VoicevoxSynthesisOptions, enable_interrogative_upspeak) - 0usize];
};
#[doc = " ::voicevox_synthesizer_tts のオプション。\n\n \\no-orig-impl{VoicevoxTtsOptions}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxTtsOptions {
    #[doc = " 疑問文の調整を有効にする"]
    pub enable_interrogative_upspeak: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VoicevoxTtsOptions"][::std::mem::size_of::<VoicevoxTtsOptions>() - 1usize];
    ["Alignment of VoicevoxTtsOptions"][::std::mem::align_of::<VoicevoxTtsOptions>() - 1usize];
    ["Offset of field: VoicevoxTtsOptions::enable_interrogative_upspeak"]
        [::std::mem::offset_of!(VoicevoxTtsOptions, enable_interrogative_upspeak) - 0usize];
};
#[doc = " ユーザー辞書の単語。\n\n \\orig-impl{VoicevoxUserDictWord}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxUserDictWord {
    #[doc = " 表記"]
    pub surface: *const ::std::os::raw::c_char,
    #[doc = " 読み"]
    pub pronunciation: *const ::std::os::raw::c_char,
    #[doc = " アクセント型"]
    pub accent_type: usize,
    #[doc = " 単語の種類"]
    pub word_type: VoicevoxUserDictWordType,
    #[doc = " 優先度"]
    pub priority: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VoicevoxUserDictWord"][::std::mem::size_of::<VoicevoxUserDictWord>() - 32usize];
    ["Alignment of VoicevoxUserDictWord"][::std::mem::align_of::<VoicevoxUserDictWord>() - 8usize];
    ["Offset of field: VoicevoxUserDictWord::surface"]
        [::std::mem::offset_of!(VoicevoxUserDictWord, surface) - 0usize];
    ["Offset of field: VoicevoxUserDictWord::pronunciation"]
        [::std::mem::offset_of!(VoicevoxUserDictWord, pronunciation) - 8usize];
    ["Offset of field: VoicevoxUserDictWord::accent_type"]
        [::std::mem::offset_of!(VoicevoxUserDictWord, accent_type) - 16usize];
    ["Offset of field: VoicevoxUserDictWord::word_type"]
        [::std::mem::offset_of!(VoicevoxUserDictWord, word_type) - 24usize];
    ["Offset of field: VoicevoxUserDictWord::priority"]
        [::std::mem::offset_of!(VoicevoxUserDictWord, priority) - 28usize];
};
unsafe extern "C" {
    pub fn voicevox_get_onnxruntime_lib_versioned_filename() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn voicevox_get_onnxruntime_lib_unversioned_filename() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn voicevox_make_default_load_onnxruntime_options() -> VoicevoxLoadOnnxruntimeOptions;
}
unsafe extern "C" {
    pub fn voicevox_onnxruntime_get() -> *const VoicevoxOnnxruntime;
}
unsafe extern "C" {
    pub fn voicevox_onnxruntime_load_once(
        options: VoicevoxLoadOnnxruntimeOptions,
        out_onnxruntime: *mut *const VoicevoxOnnxruntime,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_open_jtalk_rc_new(
        open_jtalk_dic_dir: *const ::std::os::raw::c_char,
        out_open_jtalk: *mut *mut OpenJtalkRc,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_open_jtalk_rc_use_user_dict(
        open_jtalk: *const OpenJtalkRc,
        user_dict: *const VoicevoxUserDict,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_open_jtalk_rc_analyze(
        open_jtalk: *const OpenJtalkRc,
        text: *const ::std::os::raw::c_char,
        output_accent_phrases_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_open_jtalk_rc_delete(open_jtalk: *mut OpenJtalkRc);
}
unsafe extern "C" {
    pub fn voicevox_make_default_initialize_options() -> VoicevoxInitializeOptions;
}
unsafe extern "C" {
    pub fn voicevox_get_version() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn voicevox_audio_query_create_from_accent_phrases(
        accent_phrases_json: *const ::std::os::raw::c_char,
        output_audio_query_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_voice_model_file_open(
        path: *const ::std::os::raw::c_char,
        out_model: *mut *mut VoicevoxVoiceModelFile,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_voice_model_file_id(
        model: *const VoicevoxVoiceModelFile,
        output_voice_model_id: *mut [u8; 16usize],
    );
}
unsafe extern "C" {
    pub fn voicevox_voice_model_file_create_metas_json(
        model: *const VoicevoxVoiceModelFile,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn voicevox_voice_model_file_delete(model: *mut VoicevoxVoiceModelFile);
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_new(
        onnxruntime: *const VoicevoxOnnxruntime,
        open_jtalk: *const OpenJtalkRc,
        options: VoicevoxInitializeOptions,
        out_synthesizer: *mut *mut VoicevoxSynthesizer,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_delete(synthesizer: *mut VoicevoxSynthesizer);
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_load_voice_model(
        synthesizer: *const VoicevoxSynthesizer,
        model: *const VoicevoxVoiceModelFile,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_unload_voice_model(
        synthesizer: *const VoicevoxSynthesizer,
        model_id: VoicevoxVoiceModelId,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_get_onnxruntime(
        synthesizer: *const VoicevoxSynthesizer,
    ) -> *const VoicevoxOnnxruntime;
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_is_gpu_mode(synthesizer: *const VoicevoxSynthesizer) -> bool;
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_is_loaded_voice_model(
        synthesizer: *const VoicevoxSynthesizer,
        model_id: VoicevoxVoiceModelId,
    ) -> bool;
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_create_metas_json(
        synthesizer: *const VoicevoxSynthesizer,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn voicevox_onnxruntime_create_supported_devices_json(
        onnxruntime: *const VoicevoxOnnxruntime,
        output_supported_devices_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_create_audio_query_from_kana(
        synthesizer: *const VoicevoxSynthesizer,
        kana: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        output_audio_query_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_create_audio_query(
        synthesizer: *const VoicevoxSynthesizer,
        text: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        output_audio_query_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_create_accent_phrases_from_kana(
        synthesizer: *const VoicevoxSynthesizer,
        kana: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        output_accent_phrases_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_create_accent_phrases(
        synthesizer: *const VoicevoxSynthesizer,
        text: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        output_accent_phrases_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_replace_mora_data(
        synthesizer: *const VoicevoxSynthesizer,
        accent_phrases_json: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        output_accent_phrases_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_replace_phoneme_length(
        synthesizer: *const VoicevoxSynthesizer,
        accent_phrases_json: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        output_accent_phrases_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_replace_mora_pitch(
        synthesizer: *const VoicevoxSynthesizer,
        accent_phrases_json: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        output_accent_phrases_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_make_default_synthesis_options() -> VoicevoxSynthesisOptions;
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_synthesis(
        synthesizer: *const VoicevoxSynthesizer,
        audio_query_json: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        options: VoicevoxSynthesisOptions,
        output_wav_length: *mut usize,
        output_wav: *mut *mut u8,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_make_default_tts_options() -> VoicevoxTtsOptions;
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_tts_from_kana(
        synthesizer: *const VoicevoxSynthesizer,
        kana: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        options: VoicevoxTtsOptions,
        output_wav_length: *mut usize,
        output_wav: *mut *mut u8,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_synthesizer_tts(
        synthesizer: *const VoicevoxSynthesizer,
        text: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        options: VoicevoxTtsOptions,
        output_wav_length: *mut usize,
        output_wav: *mut *mut u8,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_json_free(json: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn voicevox_wav_free(wav: *mut u8);
}
unsafe extern "C" {
    pub fn voicevox_error_result_to_message(
        result_code: VoicevoxResultCode,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn voicevox_user_dict_word_make(
        surface: *const ::std::os::raw::c_char,
        pronunciation: *const ::std::os::raw::c_char,
        accent_type: usize,
    ) -> VoicevoxUserDictWord;
}
unsafe extern "C" {
    pub fn voicevox_user_dict_new() -> *mut VoicevoxUserDict;
}
unsafe extern "C" {
    pub fn voicevox_user_dict_load(
        user_dict: *const VoicevoxUserDict,
        dict_path: *const ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_user_dict_add_word(
        user_dict: *const VoicevoxUserDict,
        word: *const VoicevoxUserDictWord,
        output_word_uuid: *mut [u8; 16usize],
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_user_dict_update_word(
        user_dict: *const VoicevoxUserDict,
        word_uuid: *const [::std::os::raw::c_uchar; 16usize],
        word: *const VoicevoxUserDictWord,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_user_dict_remove_word(
        user_dict: *const VoicevoxUserDict,
        word_uuid: *const [::std::os::raw::c_uchar; 16usize],
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_user_dict_to_json(
        user_dict: *const VoicevoxUserDict,
        output_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_user_dict_import(
        user_dict: *const VoicevoxUserDict,
        other_dict: *const VoicevoxUserDict,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_user_dict_save(
        user_dict: *const VoicevoxUserDict,
        path: *const ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
unsafe extern "C" {
    pub fn voicevox_user_dict_delete(user_dict: *mut VoicevoxUserDict);
}
